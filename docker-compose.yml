version: "3.9"
services:
  de_mysql:
    image: mysql:8.0
    container_name: de_mysql
    volumes:
      - ./mysql:/var/lib/mysql
      - ./dataset:/tmp/dataset
      - ./load_dataset:/tmp/load_dataset
      - ./load_dataset/mysql_datasource.sql:/tmp/mysql_datasource.sql
      - ./load_dataset/mysql_load_csv.sql:/tmp/mysql_load_csv.sql
    ports:
      - "3306:3306"
    env_file: 
      - env
    networks:
      - de_network

  de_psql:
    image: postgres:15
    shm_size: 1g
    container_name: de_psql
    volumes:
      - ./postgresql:/var/lib/postgresql/data
      - ./load_dataset:/tmp/load_dataset
    ports:
      - "5432:5432"
    env_file: 
      - env
    networks:
      - de_network

  minio:
    hostname: minio
    image: minio/minio
    container_name: minio
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - ./minio:/data
    ports:
      - "9001:9001"
      - "9000:9000"
    env_file:
      - env
    networks:
      - de_network

  mc:
    image: minio/mc
    container_name: mc
    hostname: mc
    env_file:
      - env
    entrypoint: >
      /bin/sh -c "  until (/usr/bin/mc config host add minio http://minio:9000 minio minio123)  do echo '...waiting...' && sleep 10; done; /usr/bin/mc mb minio/lakehouse; / usr/bin/mc policy set public minio/lakehouse; exit 0; "
    depends_on:
      - minio
    networks:
      - de_network
      

# Dagster
  de_dagster:
    build:
      context: ./dockerimages/dagster/
    container_name: de_dagster
    image: de_dagster

  de_dagster_dagit:
    image: de_dagster:latest
    entrypoint:
      - dagit
      - -h
      - "0.0.0.0"
      - -p
      - "3001"
      - -w
      - workspace.yaml
    container_name: de_dagster_dagit
    expose:
      - "3001"
    ports:
      - "3001:3001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - de_network

  de_dagster_daemon:
    image: de_dagster:latest
    entrypoint:
      - dagster-daemon
      - run
    container_name: de_dagster_daemon
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dagster_home:/opt/dagster/dagster_home
    env_file:
      - env
    networks:
      - de_network
  
  # etl
  elt_pipeline:
    build:
      context: ./elt_pipeline
      dockerfile: Dockerfile
    image: elt_pipeline:latest
    container_name: elt_pipeline
    volumes:
      - ./elt_pipeline:/opt/dagster/app/elt_pipeline
    env_file: 
      - env
    ports:
      - "4040:4040"
    networks:
      - de_network
      
  de_streamlit:
    build:
      context: ./dockerimages/streamlit
      dockerfile: Dockerfile
    image: de_streamlit:latest
    container_name: de_streamlit
    volumes:
      - ./app:/app
    env_file: env
    ports:
      - "8501:8501"
    networks:
      - de_network
  # spark
  spark-master:
    build:
      context: ./dockerimages/spark
      dockerfile: ./Dockerfile
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_LOCAL_IP=spark-master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./dockerimages/spark/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
    expose:
      - "7077"
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - de_network
        
  spark-worker:
    image: docker.io/bitnami/spark:3.4
    deploy:
      replicas: 2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    networks:
      - de_network

networks:
  de_network:
    driver: bridge
    name: de_network